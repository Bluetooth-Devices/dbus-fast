name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - uses: pre-commit/action@v3.0.1

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v6

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        os:
          - ubuntu-latest
        extension:
          - "skip_cython"
          - "use_cython"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Update apt
        run: sudo apt update
      - name: Install libs
        run: sudo apt-get install -y dbus-daemon python3-gi libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-3.0
      - uses: snok/install-poetry@v1.4.1
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
          allow-prereleases: true
      - name: Install Dependencies
        run: |
          if [ "${{ matrix.extension }}" = "skip_cython" ]; then
            SKIP_CYTHON=1 poetry install --only=main,dev
          else
            REQUIRE_CYTHON=1 poetry install --only=main,dev
          fi
      - name: Test with Pytest
        run: dbus-run-session -- poetry run pytest --cov-report=xml --timeout=5
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Update apt
        run: sudo apt update
      - name: Install libs
        run: sudo apt-get install -y dbus-daemon python3-gi libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-3.0
      - uses: snok/install-poetry@v1.4.1
      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          cache: "poetry"
      - name: Install Dependencies
        run: |
          REQUIRE_CYTHON=1 poetry install --only=main,dev
        shell: bash
      - name: Run benchmarks
        uses: CodSpeedHQ/action@v3
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: dbus-run-session -- poetry run pytest --no-cov -vvvvv --codspeed tests/benchmarks

  release:
    runs-on: ubuntu-latest
    environment: release
    outputs:
      newest_release_tag: ${{ steps.release_tag.outputs.newest_release_tag }}
    if: github.ref == 'refs/heads/main'
    needs:
      - test
      - lint
      - commitlint

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Run semantic release:
      # - Update CHANGELOG.md
      # - Update version in code
      # - Create git tag
      # - Create GitHub release
      # - Publish to PyPI
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v9.16.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install python-semantic-release
        run: python3 -m pip install python-semantic-release==7.34.6

      - name: Get Release Tag
        id: release_tag
        shell: bash
        run: |
          echo "newest_release_tag=$(semantic-release print-version --current)" >> $GITHUB_OUTPUT

  build_wheels:
    needs: [release]

    name: Build wheels on ${{ matrix.os }} with arch ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04-arm, ubuntu-latest]
        musl: ["", "musllinux"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "main"

      # Used to host cibuildwheel
      - name: Set up Python
        uses: actions/setup-python@v5

      - uses: actions/checkout@v4
        with:
          ref: "v${{ needs.release.outputs.newest_release_tag }}"
          fetch-depth: 0

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.22.0

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_SKIP: "*p36-* *p37-* *p38-* ${{ matrix.musl == 'musllinux' && '*manylinux*' || '*musllinux*' }}"
          CIBW_BEFORE_ALL_LINUX: apt-get install -y gcc || yum install -y gcc || apk add gcc
          CIBW_BUILD_VERBOSITY: 3
          REQUIRE_CYTHON: 1
          CIBW_ARCHS_LINUX: ${{ matrix.os == 'ubuntu-24.04-arm' && 'aarch64' || 'auto' }}

      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: wheels-${{ matrix.os }}-${{ matrix.musl }}

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment: release

    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@v1.12.3
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

          # To test: repository_url: https://test.pypi.org/legacy/
